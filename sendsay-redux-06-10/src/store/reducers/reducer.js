import {
  CLOSE_LOAD_PAGE,
  PUSH_FILES,
  SHOW_LOAD_PAGE,
  DATA_FORM,
  CLEAN_FORM_CONTROLS,
  PUSH_FILE,
  FILE_WILL_DELETED
} from '../actions/actionTypes'



     const initialState = {
       mainLabel: '–û—Ç–ø—Ä–∞–≤–ª—è–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π',
       isFormValid: false,
       formControls: {
           name: {
           value: '',
           type: 'text',
           id: 'name',
           label: '–û—Ç –∫–æ–≥–æ',
           placeholder: '–ò–º—è',
           errorMessage: '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ –¥–≤—É—Ö –±—É–∫–≤ ',
           valid: false,
           touched: false,
           validation: {
             required: true,
             minLength: 2
         }
       },
           email: {
           value: '',
           type: 'email',
           id: 'email',
           label: '',
           placeholder: 'Email',
           errorMessage: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email',
           valid: false,
           touched: false,
           validation: {
             required: true,
             email: true
         }
       },
           nameTo: {
           value: '',
           type: 'text',
           id: 'nameTo',
           label: '–ö–æ–º—É',
           placeholder: '–ò–º—è',
           errorMessage: '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ –¥–≤—É—Ö –±—É–∫–≤',
           valid: false,
           touched: false,
           validation: {
             required: true,
             minLength: 2
         }
       },
           emailTo: {
           value: '',
           type: 'email',
           id: 'emailTo',
           label: '',
           placeholder: 'Email',
           errorMessage: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email',
           valid: false,
           touched: false,
           validation: {
             required: true,
             email: true
         }
       },
       topicOfTheLetter: {
         value: '',
         type: 'text',
         id: 'topicOfTheLetter',
         label: '–¢–µ–º–∞ –ø–∏—Å—å–º–∞',
         placeholder: '–ú–æ—è —Ç–µ–º–∞ –ø–∏—Å—å–º–∞',
         errorMessage: '–ù–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤',
         valid: false,
         touched: false,
         validation: {
           required: true,
           minLength: 5
       }
    },
    text: {
      value: '',
      type: 'text',
      id: 'text',
      label: '–°–æ–æ–±—â–µ–Ω–∏–µ',
      placeholder: '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      errorMessage: '–ù–µ –º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤',
      valid: false,
      touched: false,
      validation: {
        required: true,
        minLength: 20
    }
   }
   },
   attach: {
     text: '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª',
     sign: 'üìé'
   },
   btn: {
     text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'
   },
   files: [],
   detailsFiles: {
     maxSizeFile: 5e+6,
     maxSizeLetter: 5e+6 * 4,
     acceptFiles: ['.jpg', '.png', '.gif', '.doc', '.xls', '.pdf', '.zip']
   },
   loadPage: false,
   responseStatus: [],
   table: {
     header: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ',
     label: '–°–æ–æ–±—â–µ–Ω–∏—è –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å',
     date: '–î–∞—Ç–∞',
     topic: '–¢–µ–º–∞',
     status: '–°—Ç–∞—Ç—É—Å',
     sended: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
     queue: '–í –æ—á–µ—Ä–µ–¥–∏',
     error: '–û—à–∏–±–∫–∞'
   }
   }

   export default function appReducer(state = initialState, action) {

   switch (action.type) {
     case CLOSE_LOAD_PAGE:
       return {
         ...state, loadPage: false
       }
     case PUSH_FILES:
       return {
         ...state, loadPage: false, files: action.files
       }
     case SHOW_LOAD_PAGE:
       return {
         ...state, loadPage: true
       }
     case DATA_FORM:
       return {
         ...state,
         formControls: action.data,
         isFormValid: action.valid
       }
     case PUSH_FILE:
       return {
         ...state, responseStatus: action.file
       }
     case CLEAN_FORM_CONTROLS:
       return {
         ...state, formControls: action.clean, files: []
       }
     case FILE_WILL_DELETED:
       return {
         ...state, files: action.filelDel
       }
     default:
       return state
   }
   }
